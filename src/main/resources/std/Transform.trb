package std

// A transformation matrix for 2d coordinates.
// The matrix in level data is 4x4, but since the Sonolus is 2d, z can be ignored.
struct Transform(
    _11, _12, _13,
    _21, _22, _23,
    _31, _32, _33,
)

operator func Transform.times(other: Transform) = Transform(
    this._11 * other._11 + this._12 * other._21 + this._13 * other._31, this._11 * other._12 + this._12 * other._22 + this._13 * other._32, this._11 * other._13 + this._12 * other._23 + this._13 * other._33,
    this._21 * other._11 + this._22 * other._21 + this._23 * other._31, this._21 * other._12 + this._22 * other._22 + this._23 * other._32, this._21 * other._13 + this._22 * other._23 + this._23 * other._33,
    this._31 * other._11 + this._32 * other._21 + this._33 * other._31, this._31 * other._12 + this._32 * other._22 + this._33 * other._32, this._31 * other._13 + this._32 * other._23 + this._33 * other._33,
)
infix func Transform.then(other: Transform) = other * this

func (m: Transform).invert(): Transform {
    var det = m._11 * (m._22 * m._33 - m._32 * m._23) -
              m._12 * (m._21 * m._33 - m._23 * m._31) +
              m._13 * (m._21 * m._32 - m._22 * m._31)

    var invdet = 1 / det
    Transform(
        (m._22 * m._33 - m._32 * m._23) * invdet,
        (m._13 * m._32 - m._12 * m._33) * invdet,
        (m._12 * m._23 - m._13 * m._22) * invdet,
        (m._23 * m._31 - m._21 * m._33) * invdet,
        (m._11 * m._33 - m._13 * m._31) * invdet,
        (m._21 * m._13 - m._11 * m._23) * invdet,
        (m._21 * m._32 - m._31 * m._22) * invdet,
        (m._31 * m._12 - m._11 * m._32) * invdet,
        (m._11 * m._22 - m._21 * m._12) * invdet,
    )
}

func (m: Transform).transpose(): Transform = Transform(
    m._11, m._21, m._31,
    m._12, m._22, m._32,
    m._13, m._23, m._33,
)

struct HomogeneousPoint(x: Number, y: Number, w: Number)

func Point.toHomogeneousPoint() = HomogeneousPoint(this.x, this.y, 1)

func HomogeneousPoint.toPoint() = Point(this.x / this.w, this.y / this.w)

func (p: HomogeneousPoint).transformedBy(t: Transform) =
    HomogeneousPoint(
        p.x * t._11 + p.y * t._12 + p.w * t._13,
        p.x * t._21 + p.y * t._22 + p.w * t._23,
        p.x * t._31 + p.y * t._32 + p.w * t._33,
    )

func Point.transformedBy(t: Transform) = this.toHomogeneousPoint().transformedBy(t).toPoint()

struct HomogeneousQuad(p1: HomogeneousPoint, p2: HomogeneousPoint, p3: HomogeneousPoint, p4: HomogeneousPoint)

func HomogeneousQuad.transformedBy(t: Transform) =
    HomogeneousQuad(this.p1.transformedBy(t), this.p2.transformedBy(t), this.p3.transformedBy(t), this.p4.transformedBy(t))

func Quad.transformedBy(t: Transform) = this.toHomogeneousQuad().transformedBy(t).toQuad()

func HomogeneousQuad.toQuad() = Quad(this.p1.toPoint(), this.p2.toPoint(), this.p3.toPoint(), this.p4.toPoint())

func Quad.toHomogeneousQuad() =
    HomogeneousQuad(this.p1.toHomogeneousPoint(), this.p2.toHomogeneousPoint(), this.p3.toHomogeneousPoint(), this.p4.toHomogeneousPoint())

let identityTransform = Transform(
    1, 0, 0,
    0, 1, 0,
    0, 0, 1,
)

func translationTransform(x: Number = 0, y: Number = 0) = Transform(
    1, 0, x,
    0, 1, y,
    0, 0, 1,
)

func scaleTransform(x: Number = 1, y: Number = 1) = Transform(
    x, 0, 0,
    0, y, 0,
    0, 0, 1,
)

func rotationTransform(theta: Number = 0) = Transform(
    cos(theta), -sin(theta), 0,
    sin(theta), cos(theta), 0,
    0, 0, 1,
)

func shearTransform(x: Number = 0, y: Number = 0) = Transform(
    1, x, 0,
    y, 1, 0,
    0, 0, 1,
)

func topPerspectiveTransform(t: Number) = Transform(
    2*t/(1+t), 0, 0,
    0, 1, (1-t)/(1+t),
    0, (1-t)/(1+t), 1,
)

func bottomPerspectiveTransform(b: Number) = Transform(
    2*b/(1+b), 0, 0,
    0, 1, (b-1)/(1+b),
    0, (b-1)/(1+b), 1,
)

func rightPerspectiveTransform(r: Number) = Transform(
    1, 0, (1-r)/(1+r),
    0, 2*r/(1+r), 0,
    (1-r)/(1+r), 0, 1
)

func leftPerspectiveTransform(l: Number) = Transform(
    1, 0, (l-1)/(1+l),
    0, 2*l/(1+l), 0,
    (l-1)/(1+l), 0, 1
)

func fullPerspectiveTransform(x: Number, y: Number) = Transform(
    2*x/(1+x**2), -(y**2-1)*(x**2-1)/(2*x*(1+y**2)), -(y**2-1)*(x**2+1)/(2*x*(1+y**2)),
    -(y**2-1)*(x**2-1)/(2*y*(1+x**2)), 2*y/(1+y**2), -(y**2+1)*(x**2-1)/(2*y*(1+x**2)),
    (1-y**2)/(1+y**2), (1-x**2)/(1+x**2), 1,
)
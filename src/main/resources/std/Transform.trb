package std

// A transformation matrix for 2d coordinates.
// The matrix in level data is 4x4, but since the Sonolus is 2d, z can be ignored.
struct Transform(
    _11, _12, _13,
    _21, _22, _23,
    _31, _32, _33,
)

operator func Transform.times(other: Transform) = Transform(
    this._11 * other._11 + this._12 * other._21 + this._13 * other._31, this._11 * other._12 + this._12 * other._22 + this._13 * other._32, this._11 * other._13 + this._12 * other._23 + this._13 * other._33,
    this._21 * other._11 + this._22 * other._21 + this._23 * other._31, this._21 * other._12 + this._22 * other._22 + this._23 * other._32, this._21 * other._13 + this._22 * other._23 + this._23 * other._33,
    this._31 * other._11 + this._32 * other._21 + this._33 * other._31, this._31 * other._12 + this._32 * other._22 + this._33 * other._32, this._31 * other._13 + this._32 * other._23 + this._33 * other._33,
)
infix func Transform.then(other: Transform) = other * this

let identityTransform = Transform(
    1, 0, 0,
    0, 1, 0,
    0, 0, 1,
)

func translationTransform(x: Number = 0, y: Number = 0) = Transform(
    1, 0, x,
    0, 1, y,
    0, 0, 1,
)

func scaleTransform(x: Number = 1, y: Number = 1) = Transform(
    x, 0, 0,
    0, y, 0,
    0, 0, 1,
)

func rotationTransform(theta: Number = 0) = Transform(
    cos(theta), -sin(theta), 0,
    sin(theta), cos(theta), 0,
    0, 0, 1,
)

func shearTransform(x: Number = 0, y: Number = 0) = Transform(
    1, x, 0,
    y, 1, 0,
    0, 0, 1,
)

func topPerspectiveTransform(t: Number) = Transform(
    2*t/(1+t), 0, 0,
    0, 1, (1-t)/(1+t),
    0, (1-t)/(1+t), 1,
)

func bottomPerspectiveTransform(b: Number) = Transform(
    2*b/(1+b), 0, 0,
    0, 1, (b-1)/(1+b),
    0, (b-1)/(1+b), 1,
)

func rightPerspectiveTransform(r: Number) = Transform(
    1, 0, (1-r)/(1+r),
    0, 2*r/(1+r), 0,
    (1-r)/(1+r), 0, 1
)

func leftPerspectiveTransform(l: Number) = Transform(
    1, 0, (l-1)/(1+l),
    0, 2*l/(1+l), 0,
    (l-1)/(1+l), 0, 1
)

func fullPerspectiveTransform(x: Number, y: Number) = Transform(
    2*x/(1+x**2), -(y**2-1)*(x**2-1)/(2*x*(1+y**2)), -(y**2-1)*(x**2+1)/(2*x*(1+y**2)),
    -(y**2-1)*(x**2-1)/(2*y*(1+x**2)), 2*y/(1+y**2), -(y**2+1)*(x**2-1)/(2*y*(1+x**2)),
    (1-y**2)/(1+y**2), (1-x**2)/(1+x**2), 1,
)
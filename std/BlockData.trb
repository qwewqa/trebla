package std

let LEVEL_MEMORY_BLOCK = 0
let LEVEL_DATA_BLOCK = 1
let LEVEL_OPTION_BLOCK = 2
let LEVEL_TRANSFORM_BLOCK = 3
let LEVEL_BACKGROUND_BLOCK = 4
let LEVEL_UI_BLOCK = 5
let LEVEL_BUCKET_BLOCK = 6
let LEVEL_SCORE_BLOCK = 7
let LEVEL_LIFE_BLOCK = 8
let ENTITY_INFO_ARRAY = 10
let ENTITY_DATA_ARRAY = 11
let ENTITY_SHARED_MEMORY_ARRAY = 12
let ENTITY_INFO = 20
let ENTITY_MEMORY = 21
let ENTITY_DATA = 22
let ENTITY_INPUT = 23
let ENTITY_SHARED_MEMORY = 24
let TEMPORARY_MEMORY = 100
let TEMPORARY_DATA = 101

func memref(block: Number, index: Number) = *Pointer[UnknownPrimitive](block, index)
func numref(block: Number, index: Number) = Number(memref(block, index))
func boolref(block: Number, index: Number) = Boolean(memref(block, index))

let levelData = namespace {
    let time = numref(LEVEL_DATA_BLOCK, 0)
    let deltaTime = numref(LEVEL_DATA_BLOCK, 1)
    let aspectRatio = numref(LEVEL_DATA_BLOCK, 2)
    let deviceAudioOffset = numref(LEVEL_DATA_BLOCK, 3)
    let deviceInputOffset = numref(LEVEL_DATA_BLOCK, 4)
}

let time = levelData.time
let deltaTime = levelData.deltaTime

let levelTransform = Transform(
    numref(LEVEL_TRANSFORM_BLOCK, 0), numref(LEVEL_TRANSFORM_BLOCK, 1), numref(LEVEL_TRANSFORM_BLOCK, 3),
    numref(LEVEL_TRANSFORM_BLOCK, 4), numref(LEVEL_TRANSFORM_BLOCK, 5), numref(LEVEL_TRANSFORM_BLOCK, 7),
    numref(LEVEL_TRANSFORM_BLOCK, 12), numref(LEVEL_TRANSFORM_BLOCK, 13), numref(LEVEL_TRANSFORM_BLOCK, 15),
)

let levelBackground = Quad(
    Point(numref(LEVEL_BACKGROUND_BLOCK, 0), numref(LEVEL_BACKGROUND_BLOCK, 1)),
    Point(numref(LEVEL_BACKGROUND_BLOCK, 2), numref(LEVEL_BACKGROUND_BLOCK, 3)),
    Point(numref(LEVEL_BACKGROUND_BLOCK, 4), numref(LEVEL_BACKGROUND_BLOCK, 5)),
    Point(numref(LEVEL_BACKGROUND_BLOCK, 6), numref(LEVEL_BACKGROUND_BLOCK, 7)),
)

struct UIInfo(
    anchorX: Number = 0, anchorY: Number = 0,
    pivotX: Number = 0, pivotY: Number = 0,
    width: Number, height: Number,
    rotation: Number = 0, alpha: Number = 1,
    horizontalAlign: Number = 0, verticalAlign: Number = 0,
    background: Boolean = false,
)

private func uiBlock(offset: Number) = UIInfo(
    numref(LEVEL_UI_BLOCK, offset + 0),
    numref(LEVEL_UI_BLOCK, offset + 1),
    numref(LEVEL_UI_BLOCK, offset + 2),
    numref(LEVEL_UI_BLOCK, offset + 3),
    numref(LEVEL_UI_BLOCK, offset + 4),
    numref(LEVEL_UI_BLOCK, offset + 5),
    numref(LEVEL_UI_BLOCK, offset + 6),
    numref(LEVEL_UI_BLOCK, offset + 7),
    numref(LEVEL_UI_BLOCK, offset + 8),
    numref(LEVEL_UI_BLOCK, offset + 9),
    boolref(LEVEL_UI_BLOCK, offset + 10),
)

let levelUI = namespace {
    let menu = uiBlock(0 * 11)
    let judgment = uiBlock(1 * 11)
    let comboValue = uiBlock(2 * 11)
    let comboText = uiBlock(3 * 11)
    let scoreBar = uiBlock(4 * 11)
    let scoreValue = uiBlock(5 * 11)
    let lifeBar = uiBlock(6 * 11)
    let lifeValue = uiBlock(7 * 11)
}

let entityInfo = namespace {
    let index = numref(ENTITY_INFO, 0)
    let archetype = numref(ENTITY_INFO, 1)
    let state = numref(ENTITY_INFO, 2)
}

enum EntityState {
    WAITING = 0,
    SPAWNED = 1,
    DESPAWNED = 2,
}

struct EntityInfo(entityIndex: Number)
func EntityInfo.index() = numref(ENTITY_INFO_ARRAY, this.entityIndex * 3)
func EntityInfo.archetype() = numref(ENTITY_INFO_ARRAY, this.entityIndex * 3 + 1)
func EntityInfo.state() = numref(ENTITY_INFO_ARRAY, this.entityIndex * 3 + 2).toEnum(EntityState)
func EntityInfo.waiting() = this.state() matches EntityState.WAITING
func EntityInfo.spawned() = this.state() matches EntityState.SPAWNED
func EntityInfo.despawned() = this.state() matches EntityState.DESPAWNED

enum EntityJudgement {
    MISS = 0,
    PERFECT = 1,
    GREAT = 2,
    GOOD = 3,
}

func EntityJudgement.clip() = Clip(this.ordinal)

let entityInput = namespace {
    let judgment = numref(ENTITY_INPUT, 0).toEnum(EntityJudgement)
    let bucket = numref(ENTITY_INPUT, 1)
    let bucketValue = numref(ENTITY_INPUT, 2)
}

let touchData = namespace {
    let id = numref(TEMPORARY_DATA, 0)
    let started = boolref(TEMPORARY_DATA, 1)
    let ended = boolref(TEMPORARY_DATA, 2)
    let t = numref(TEMPORARY_DATA, 3)
    let st = numref(TEMPORARY_DATA, 4)
    let x = numref(TEMPORARY_DATA, 5)
    let y = numref(TEMPORARY_DATA, 6)
    let position = Point(x, y)
    let sx = numref(TEMPORARY_DATA, 7)
    let sy = numref(TEMPORARY_DATA, 8)
    let dx = numref(TEMPORARY_DATA, 9)
    let dy = numref(TEMPORARY_DATA, 10)
    let vx = numref(TEMPORARY_DATA, 11)
    let vy = numref(TEMPORARY_DATA, 12)
    let vr = numref(TEMPORARY_DATA, 13)
    let vw = numref(TEMPORARY_DATA, 14)
    let pos = Point(x, y)
    let startPos = Point(sx, sy)
}

private struct LevelBucketAccessor
operator func LevelBucketAccessor.subscript(index: Number) = LevelBucketData(
    numref(LEVEL_BUCKET_BLOCK, index * 6 + 0),
    numref(LEVEL_BUCKET_BLOCK, index * 6 + 1),
    numref(LEVEL_BUCKET_BLOCK, index * 6 + 2),
    numref(LEVEL_BUCKET_BLOCK, index * 6 + 3),
    numref(LEVEL_BUCKET_BLOCK, index * 6 + 4),
    numref(LEVEL_BUCKET_BLOCK, index * 6 + 5),
)

let buckets = LevelBucketAccessor()

let levelScore = namespace {
    let perfectScoreMultiplier = numref(LEVEL_SCORE_BLOCK, 0)
    let greatScoreMultiplier = numref(LEVEL_SCORE_BLOCK, 1)
    let goodScoreMultiplier = numref(LEVEL_SCORE_BLOCK, 2)
    let consecutivePerfectScoreMultiplier = numref(LEVEL_SCORE_BLOCK, 3)
    let consecutivePerfectScoreStep = numref(LEVEL_SCORE_BLOCK, 4)
    let consecutivePerfectScoreCap = numref(LEVEL_SCORE_BLOCK, 5)
    let consecutiveGreatScoreMultiplier = numref(LEVEL_SCORE_BLOCK, 6)
    let consecutiveGreatScoreStep = numref(LEVEL_SCORE_BLOCK, 7)
    let consecutiveGreatScoreCap = numref(LEVEL_SCORE_BLOCK, 8)
    let consecutiveGoodScoreMultiplier = numref(LEVEL_SCORE_BLOCK, 9)
    let consecutiveGoodScoreStep = numref(LEVEL_SCORE_BLOCK, 10)
    let consecutiveGoodScoreCap = numref(LEVEL_SCORE_BLOCK, 11)
}

let levelLife = {
    let consecutivePerfectLifeIncrement = numref(LEVEL_LIFE_BLOCK, 0)
    let consecutivePerfectLifeStep = numref(LEVEL_LIFE_BLOCK, 1)
    let consecutiveGreatLifeIncrement = numref(LEVEL_LIFE_BLOCK, 2)
    let consecutiveGreatLifeStep = numref(LEVEL_LIFE_BLOCK, 3)
    let consecutiveGoodLifeIncrement = numref(LEVEL_LIFE_BLOCK, 4)
    let consecutiveGoodLifeStep = numref(LEVEL_LIFE_BLOCK, 5)
}

struct LevelBucketData(
    minPerfect: Number,
    maxPerfect: Number,
    minGreat: Number,
    maxGreat: Number,
    minGood: Number,
    maxGood: Number,
)
